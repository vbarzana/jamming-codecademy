{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","services/Spotify.js","components/Player/Player.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchClick","bind","assertThisInitialized","doSearch","onSearchKeyPress","event","preventDefault","search","document","querySelector","value","onSearchChange","console","log","charCode","react_default","a","createElement","className","placeholder","onKeyPress","onClick","React","Component","Track","handleAddTrackClick","handlePlayTrack","onToggleTrackToPlaylist","trackId","onToggleTrackPlay","plusMinus","inPlaylist","playingNow","title","artist","album","TrackList","tracks","map","track","components_Track_Track","key","id","name","Playlist","handleSaveToSpotify","playlistName","onSaveToSpotify","defaultValue","components_TrackList_TrackList","playlistNameEl","clientId","process","apiUrl","accessToken","userId","clearCredentials","window","location","hash","Spotify","login","params","e","hashParams","r","q","substring","exec","decodeURIComponent","getHashParams","access_token","expiresIn","parseInt","expires_in","setTimeout","fetch","concat","headers","Content-Type","Authorization","getTokenFromHash","then","response","ok","json","Error","jsonResponse","doCreatePlaylist","playlist","_context2","t0","addTracksToPlaylist","t1","getUserId","user_id","method","body","JSON","stringify","uris","uri","url","encodeURIComponent","query","types","items","artists","Player","_ref","currentTrackId","trackUrl","src","width","height","allowtransparency","frameBorder","allow","App","state","searchResults","playListTracks","addToPlaylist","removeFromPlaylist","previewInPlayer","searchString","results","setState","_context","tracksinPlaylist","filter","trackInSearchResult","push","assign","checkTrack","playlistTracks","trackinPlaylistPosition","position","splice","createPlaylist","clearPlaylist","alert","message","components_SearchBar_SearchBar","components_Player_Player","components_Playlist_Playlist","Boolean","hostname","match","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00be096a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.onSearchClick = this.onSearchClick.bind(this);\r\n\t\tthis.doSearch = this.doSearch.bind(this);\r\n\t\tthis.onSearchKeyPress = this.onSearchKeyPress.bind(this);\r\n\t}\r\n\r\n\tonSearchClick(event) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.doSearch();\r\n\t}\r\n\r\n\tdoSearch(){\r\n\t\tconst search = document.querySelector(\".SearchBar input\").value;\r\n\t\tif (this.props.onSearchChange) {\r\n\t\t\tthis.props.onSearchChange(search);\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchKeyPress(event) {\r\n\t\tconsole.log(event);\r\n\t\tif(event.charCode === 13){\r\n\t\t\treturn this.doSearch();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchBar\">\r\n\t\t\t\t<input placeholder=\"Search in Spotify\" onKeyPress={this.onSearchKeyPress}/>\r\n\t\t\t\t<button onClick={this.onSearchClick}>SEARCH</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleAddTrackClick = this.handleAddTrackClick.bind(this);\r\n\t\tthis.handlePlayTrack = this.handlePlayTrack.bind(this);\r\n\t}\r\n\r\n\thandleAddTrackClick(event) {\r\n\t\tthis.props.onToggleTrackToPlaylist(this.props.trackId);\r\n\t\treturn event.preventDefault();\r\n\t}\r\n\r\n\thandlePlayTrack(event) {\r\n\t\tthis.props.onToggleTrackPlay(this.props.trackId);\r\n\t\treturn event.preventDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet plusMinus = this.props.inPlaylist ? 'remove_circle_outline' : 'add';\r\n\t\tconst className = 'Track ' + (this.props.playingNow ? 'playing-now' : '');\r\n\t\treturn (\r\n\t\t\t<div className={className}>\r\n\t\t\t\t<div className=\"Track-information\">\r\n\t\t\t\t\t<h3>{this.props.title}</h3>\r\n\t\t\t\t\t<p>{this.props.artist} | {this.props.album}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<a className=\"Track-action\" onClick={this.handleAddTrackClick}><i className=\"material-icons\">{plusMinus}</i></a>\r\n\t\t\t\t<a className=\"Track-play-button\" onClick={this.handlePlayTrack}><i className=\"material-icons\">play_circle_outline</i></a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TrackList\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.tracks.map(track => (\r\n\t\t\t\t\t\t\t<Track\r\n\t\t\t\t\t\t\t\tkey={track.id}\r\n\t\t\t\t\t\t\t\ttrackId={track.id}\r\n\t\t\t\t\t\t\t\tinPlaylist={track.inPlaylist}\r\n\t\t\t\t\t\t\t\talbum={track.album}\r\n\t\t\t\t\t\t\t\tonToggleTrackToPlaylist={this.props.onToggleTrackToPlaylist}\r\n\t\t\t\t\t\t\t\tonToggleTrackPlay={this.props.onToggleTrackPlay}\r\n\t\t\t\t\t\t\t\tartist={track.artist}\r\n\t\t\t\t\t\t\t\tplayingNow={track.playingNow}\r\n\t\t\t\t\t\t\t\ttitle={track.name}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nconst defaultValue = 'New Playlist';\r\n\r\nclass Playlist extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleSaveToSpotify = this.handleSaveToSpotify.bind(this);\r\n\t}\r\n\r\n\tstatic clearPlaylist() {\r\n\t\tconst playlistNameEl = document.querySelector(\".Playlist input\");\r\n\t\tif (playlistNameEl) {\r\n\t\t\tplaylistNameEl.value = defaultValue;\r\n\t\t}\r\n\t}\r\n\r\n\thandleSaveToSpotify(event) {\r\n\t\tconst playlistName = document.querySelector(\".Playlist input\").value;\r\n\t\tthis.props.onSaveToSpotify(playlistName);\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Playlist\">\r\n\t\t\t\t<input defaultValue={defaultValue}/>\r\n\t\t\t\t<TrackList\r\n\t\t\t\t\ttracks={this.props.tracks}\r\n\t\t\t\t\tonToggleTrackToPlaylist={this.props.onToggleTrackToPlaylist}\r\n\t\t\t\t\tonToggleTrackPlay={this.props.onToggleTrackPlay}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className=\"Playlist-save\" onClick={this.handleSaveToSpotify}>SAVE TO SPOTIFY</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Playlist;\r\n","const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nconst redirectUri =\r\n  process.env.REACT_APP_SPOTIFY_CALLBACK || 'http://localhost:3000/callback';\r\n\r\n  console.log(clientId);\r\n  console.log(redirectUri);\r\nconst apiUrl = 'https://api.spotify.com/v1';\r\nconst scope = 'playlist-modify-public';\r\nconst defaultTypes = 'album,artist,playlist,track';\r\nlet accessToken = null;\r\nlet userId = null;\r\n\r\n/**\r\n * Obtains parameters from the hash of the URL\r\n * @return Object\r\n */\r\nconst getHashParams = () => {\r\n  let hashParams = {};\r\n  let e,\r\n    r = /([^&;=]+)=?([^&;]*)/g;\r\n  let q = window.location.hash.substring(1);\r\n\r\n  while ((e = r.exec(q))) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n  }\r\n  return hashParams;\r\n};\r\n\r\nconst clearCredentials = () => {\r\n  accessToken = null;\r\n  window.location.hash = '';\r\n  userId = null;\r\n  Spotify.login();\r\n};\r\n\r\nclass Spotify {\r\n  static getTokenFromHash() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    let params = getHashParams();\r\n    accessToken = params.access_token;\r\n    const expiresIn = parseInt(params.expires_in, 10) * 1000;\r\n\r\n    if (accessToken) {\r\n      setTimeout(() => clearCredentials, expiresIn);\r\n    } else {\r\n      return Spotify.login();\r\n    }\r\n\r\n    return accessToken;\r\n  }\r\n\r\n  static async getUserId() {\r\n    if (userId) {\r\n      return userId;\r\n    }\r\n    return fetch(`${apiUrl}/me`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${Spotify.getTokenFromHash()}`\r\n      }\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Invalid response');\r\n      })\r\n      .then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return userId;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Creates a new playlist in Spotify, once the playlist is created it will add the user tracks, note, if a playlist\r\n   * with the same name already exist in Spotify it will not alert the user, instead a playlist with the same name\r\n   * will be created\r\n   * @param {String} name The name of the playlist\r\n   * @param {Track []} tracks The tracks array\r\n   * @returns {Promise<void>}\r\n   */\r\n  static async createPlaylist(name, tracks) {\r\n    if (!name) return;\r\n    let playlist;\r\n    try {\r\n      playlist = await Spotify.doCreatePlaylist(name);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    try {\r\n      await Spotify.addTracksToPlaylist(playlist, tracks);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  static async doCreatePlaylist(name) {\r\n    let user_id = await Spotify.getUserId();\r\n    return fetch(`${apiUrl}/users/${user_id}/playlists`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${Spotify.getTokenFromHash()}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: name\r\n      })\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error('Invalid response');\r\n    });\r\n  }\r\n\r\n  static async addTracksToPlaylist(playlist, tracks) {\r\n    return fetch(`${apiUrl}/playlists/${playlist.id}/tracks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${Spotify.getTokenFromHash()}`\r\n      },\r\n      body: JSON.stringify({\r\n        uris: (tracks || []).map(track => track.uri)\r\n      })\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error('Invalid response');\r\n    });\r\n  }\r\n\r\n  static login() {\r\n    const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${encodeURIComponent(\r\n      clientId\r\n    )}&scope=${encodeURIComponent(scope)}&redirect_uri=${encodeURIComponent(\r\n      redirectUri\r\n    )}`;\r\n    window.location = url;\r\n  }\r\n\r\n  static async search(query, types) {\r\n    let accessToken = Spotify.getTokenFromHash('search', [query, types]);\r\n    query = encodeURIComponent(query);\r\n    if (!types) {\r\n      types = defaultTypes;\r\n    }\r\n    types = encodeURIComponent(types);\r\n\r\n    return fetch(`${apiUrl}/search?q=${query}&type=${types}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        clearCredentials();\r\n        throw new Error('Request failed!');\r\n      })\r\n      .then(jsonResponse => {\r\n        let tracks =\r\n          (jsonResponse && jsonResponse && jsonResponse.tracks.items) || [];\r\n        return tracks.map(track => {\r\n          return {\r\n            id: track.id,\r\n            uri: track.uri,\r\n            album: track.album.name,\r\n            name: track.name,\r\n            artist: track.artists[0] && track.artists[0].name\r\n          };\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './Player.css';\r\n\r\nconst Player = ({currentTrackId})=>{\r\n\t\tif (!currentTrackId) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst trackUrl = `https://open.spotify.com/embed/track/${currentTrackId}`;\r\n\t\treturn (\r\n\t\t\t<div className=\"Player\">\r\n\t\t\t\t<h2>Listen</h2>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<iframe\r\n\t\t\t\t\tsrc={trackUrl}\r\n\t\t\t\t\ttitle={currentTrackId}\r\n\t\t\t\t\twidth=\"500\" height=\"80\"\r\n\t\t\t\t\tallowtransparency=\"true\"\r\n\t\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\t\tallow=\"encrypted-media\"></iframe>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Player;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\nimport Playlist from \"../Playlist/Playlist\";\r\nimport Spotify from \"../../services/Spotify\";\r\nimport Player from \"../Player/Player\";\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentTrackId: null,\r\n\t\t\tsearchResults: [],\r\n\t\t\tplayListTracks: []\r\n\t\t};\r\n\t\tthis.onSearchChange = this.onSearchChange.bind(this);\r\n\t\tthis.addToPlaylist = this.addToPlaylist.bind(this);\r\n\t\tthis.removeFromPlaylist = this.removeFromPlaylist.bind(this);\r\n\t\tthis.onSaveToSpotify = this.onSaveToSpotify.bind(this);\r\n\t\tthis.previewInPlayer = this.previewInPlayer.bind(this);\r\n\t}\r\n\r\n\tasync onSearchChange(searchString) {\r\n\t\tif (!searchString) return null;\r\n\t\ttry {\r\n\t\t\tlet results = await Spotify.search(searchString);\r\n\t\t\tthis.setState({\r\n\t\t\t\tsearchResults: results\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\taddToPlaylist(trackId) {\r\n\t\tlet tracksinPlaylist = this.state.playListTracks;\r\n\t\tconst inPlaylist = tracksinPlaylist.filter(track => track.id === trackId)[0];\r\n\r\n\t\tif (!inPlaylist) {\r\n\t\t\tconst trackInSearchResult = this.state.searchResults.filter(track => track.id === trackId)[0];\r\n\t\t\tif (trackInSearchResult) {\r\n\t\t\t\ttracksinPlaylist.push(Object.assign({\r\n\t\t\t\t\tinPlaylist: true\r\n\t\t\t\t}, trackInSearchResult));\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tplayListTracks: tracksinPlaylist\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpreviewInPlayer(trackId) {\r\n\t\tconst checkTrack = track => {\r\n\t\t\tif (track.playingNow) {\r\n\t\t\t\ttrack.playingNow = false;\r\n\t\t\t}\r\n\t\t\tif (track.id === trackId) {\r\n\t\t\t\ttrack.playingNow = true;\r\n\t\t\t}\r\n\t\t\treturn track;\r\n\t\t};\r\n\t\tlet results = this.state.searchResults.map(checkTrack);\r\n\t\tlet playlistTracks = this.state.playListTracks.map(checkTrack);\r\n\r\n\t\tthis.setState({\r\n\t\t\tsearchResults: results,\r\n\t\t\tplayListTracks: playlistTracks,\r\n\t\t\tcurrentTrackId: trackId\r\n\t\t});\r\n\t}\r\n\r\n\tremoveFromPlaylist(trackId) {\r\n\t\tlet tracksinPlaylist = this.state.playListTracks;\r\n\t\tlet trackinPlaylistPosition = -1;\r\n\t\tconst inPlaylist = tracksinPlaylist.filter((track, position) => {\r\n\t\t\tconst matches = track.id === trackId;\r\n\t\t\tif (matches) {\r\n\t\t\t\ttrackinPlaylistPosition = position;\r\n\t\t\t}\r\n\t\t\treturn track.id === trackId;\r\n\t\t})[0];\r\n\r\n\t\tif (inPlaylist && trackinPlaylistPosition > -1) {\r\n\t\t\ttracksinPlaylist.splice(trackinPlaylistPosition, 1);\r\n\t\t\tthis.setState({\r\n\t\t\t\tplayListTracks: tracksinPlaylist\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tasync onSaveToSpotify(playlistName) {\r\n\t\ttry {\r\n\t\t\tawait Spotify.createPlaylist(playlistName, this.state.playListTracks);\r\n\t\t\t// if no error, then clear the playlist\r\n\t\t\tthis.setState({\r\n\t\t\t\tplayListTracks: []\r\n\t\t\t});\r\n\t\t\tPlaylist.clearPlaylist();\r\n\t\t\talert(`Playlist ${playlistName} successfully created!`);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t\talert(error.message);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<SearchBar\r\n\t\t\t\t\tonSearchChange={this.onSearchChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<Player currentTrackId={this.state.currentTrackId}/>\r\n\t\t\t\t<div className=\"App-playlist\">\r\n\t\t\t\t\t<div className=\"SearchResults\">\r\n\t\t\t\t\t\t<h2>Results</h2>\r\n\t\t\t\t\t\t<TrackList\r\n\t\t\t\t\t\t\ttracks={this.state.searchResults}\r\n\t\t\t\t\t\t\tonToggleTrackToPlaylist={this.addToPlaylist}\r\n\t\t\t\t\t\t\tonToggleTrackPlay={this.previewInPlayer}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Playlist\r\n\t\t\t\t\t\ttracks={this.state.playListTracks}\r\n\t\t\t\t\t\tonToggleTrackToPlaylist={this.removeFromPlaylist}\r\n\t\t\t\t\t\tonSaveToSpotify={this.onSaveToSpotify}\r\n\t\t\t\t\t\tonToggleTrackPlay={this.previewInPlayer}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}